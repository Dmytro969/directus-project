import { NextResponse } from 'next/server';
import { Product } from '@/types/product';

// Helper function to strip HTML tags
function stripHtmlTags(html: string | null) {
  if (!html) return '';
  return html.replace(/<\/?[^>]+(>|$)/g, '');
}

// Define interface for media item
interface MediaItem {
  directus_files_id: string | null | {
    id?: string;
    filename_download?: string;
    type?: string;
    filesize?: number;
    [key: string]: any;
  };
  [key: string]: any;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î —Ñ–∞–π–ª –≤—ñ–¥–µ–æ –∑–∞ –π–æ–≥–æ —ñ–º'—è–º
function isVideoFile(filename: string | undefined): boolean {
  if (!filename) return false;
  const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.wmv', '.mkv', '.m4v'];
  const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
  return videoExtensions.includes(ext);
}

export async function GET() {
  try {
    // –ü—Ä—è–º–æ –∑–∞–¥–∞—î–º–æ URL Directus –±–µ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    const directusUrl = process.env.NEXT_PUBLIC_DIRECTUS_URL || 'https://suppinfo.directus.app';
    
    // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π —Ç–æ–∫–µ–Ω (—è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ)
    let accessToken = '';
    try {
      const authResponse = await fetch(`${directusUrl}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: process.env.DIRECTUS_ADMIN_EMAIL || 'admin@example.com',
          password: process.env.DIRECTUS_ADMIN_PASSWORD || 'admin-password'
        }),
        cache: 'no-store'
      });
      
      if (authResponse.ok) {
        const authData = await authResponse.json();
        accessToken = authData.data?.access_token;
      }
    } catch (_) {
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ API
    // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏, —â–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ —ó—Ö —Ç–∏–ø
    const apiUrl = `${directusUrl}/items/products?fields=id,Name,is_new,Aroma,Effects,Type,thc_purity,thc_purity_value,Media.*,Media.directus_files_id.*`;
    
    try {
      // –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, —è–∫—â–æ –º–∏ –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞–ª–∏
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`;
      }
      
      const response = await fetch(apiUrl, { 
        method: 'GET',
        headers,
        // –í–∏–º–∏–∫–∞—î–º–æ –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        cache: 'no-store'
      });
      
      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }
      
      const data = await response.json();
      
      // –Ø–∫—â–æ –∑ API –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—Ä–∏–π—à–ª–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥
      if (!data.data || data.data.length === 0) {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑ –º–µ–¥—ñ–∞ –¥–∞–Ω–∏–º–∏
        return NextResponse.json({
          data: getExampleProducts()
        });
      }
      
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
      const transformedData = {
        data: Array.isArray(data.data) ? data.data.map((product: any) => {
          // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–∞—Å–∏–≤–∏ –¥–ª—è –º–µ–¥—ñ–∞ —Ç–∞ –≤—ñ–¥–µ–æ URL
          const mediaUrls: string[] = [];
          const videoUrls: string[] = [];
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∞—î –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª–µ Media –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
          if (product.Media && Array.isArray(product.Media)) {
            // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç Media, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            product.Media.forEach((mediaItem: any) => {
              // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –æ–±'—î–∫—Ç –∑ directus_files_id
              if (mediaItem && typeof mediaItem === 'object') {
                if (mediaItem.directus_files_id) {
                  // –ú–æ–∂–µ –±—É—Ç–∏ string –∞–±–æ –æ–±'—î–∫—Ç
                  if (typeof mediaItem.directus_files_id === 'string') {
                    const mediaUrl = `/api/media/${mediaItem.directus_files_id}`;
                    mediaUrls.push(mediaUrl);
                  } else if (typeof mediaItem.directus_files_id === 'object' && mediaItem.directus_files_id.id) {
                    const fileId = mediaItem.directus_files_id.id;
                    const mediaUrl = `/api/media/${fileId}`;
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–µ–æ
                    if (mediaItem.directus_files_id.filename_download && 
                        isVideoFile(mediaItem.directus_files_id.filename_download)) {
                      videoUrls.push(mediaUrl);
                    } else {
                      mediaUrls.push(mediaUrl);
                    }
                  }
                } else if ('id' in mediaItem) {
                  // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –æ–±'—î–∫—Ç –∑ id
                  const mediaUrl = `/api/media/${mediaItem.id}`;
                  mediaUrls.push(mediaUrl);
                }
              } else if (typeof mediaItem === 'number' || typeof mediaItem === 'string') {
                // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ ID
                const mediaUrl = `/api/media/${mediaItem}`;
                mediaUrls.push(mediaUrl);
              }
            });
          }
          
          // –Ø–∫—â–æ –º–µ–¥—ñ–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
          let mainImageUrl: string;
          if (mediaUrls.length > 0) {
            mainImageUrl = mediaUrls[0]; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          } else {
            const placeholderId = (typeof product.id === 'number' ? product.id : 1) % 3 + 1;
            mainImageUrl = `/placeholder-${placeholderId}.svg`;
            // –î–æ–¥–∞—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —É –º–∞—Å–∏–≤ –º–µ–¥—ñ–∞
            mediaUrls.push(mainImageUrl);
          }
          
          return {
            ...product,
            image: mainImageUrl,
            mediaUrls: mediaUrls.length > 0 ? mediaUrls : null,
            videoUrls: videoUrls.length > 0 ? videoUrls : null,
            // –û—á–∏—â–∞—î–º–æ HTML —Ç–µ–≥–∏ –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            Aroma: stripHtmlTags(product.Aroma),
            Effects: stripHtmlTags(product.Effects),
            Type: product.Type ? stripHtmlTags(product.Type) : undefined
          };
        }) : []
      };
      
      return NextResponse.json(transformedData);
    } catch (error) {
      // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥
      console.error('API request error:', error);
      return NextResponse.json({
        data: getExampleProducts()
      });
    }
  } catch (error) {
    console.error('Error processing products:', error);
    return NextResponse.json(
      { error: 'Failed to fetch products' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
function getExampleProducts() {
  return [
    {
      id: 7,
      Name: "üéÇWedding Cake üéÇ",
      is_new: true,
      Aroma: "Sweet, creamy, with hints of vanilla, earthy undertones, and a touch of citrus (9/10).",
      Effects: "Relaxing, euphoric, with a calming body high that melts away stress and tension",
      Type: "Hybrid (Indica 60% / Sativa 40%)",
      thc_purity: "THC",
      thc_purity_value: 23,
      // –ù–∞–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –º–µ–¥—ñ–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
      image: `/placeholder-1.svg`,
      mediaUrls: [`/placeholder-1.svg`],
      videoUrls: null
    }
  ];
} 